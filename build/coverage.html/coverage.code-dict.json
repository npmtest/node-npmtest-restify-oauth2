{"/home/travis/build/npmtest/node-npmtest-restify-oauth2/test.js":"/* istanbul instrument in package npmtest_restify_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/lib.npmtest_restify_oauth2.js":"/* istanbul instrument in package npmtest_restify_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_restify_oauth2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_restify_oauth2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-restify-oauth2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_restify_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_restify_oauth2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_restify_oauth2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_restify_oauth2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_restify_oauth2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_restify_oauth2.__dirname + '/lib.npmtest_restify_oauth2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/index.js":"\"use strict\";\n\nexports.cc = require(\"./cc\");\nexports.ropc = require(\"./ropc\");\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/cc/index.js":"\"use strict\";\n\nvar makeSetup = require(\"../common/makeSetup\");\nvar grantToken = require(\"./grantToken\");\n\nvar grantTypes = \"client_credentials\";\nvar requiredHooks = [\"grantClientToken\", \"authenticateToken\"];\n\nmodule.exports = makeSetup(grantTypes, requiredHooks, grantToken);\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/common/makeSetup.js":"\"use strict\";\n\nvar _ = require(\"underscore\");\n\nmodule.exports = function makeSetup(grantTypes, requiredHooks, grantToken) {\n    var errorSenders = require(\"./makeErrorSenders\")(grantTypes);\n    var handleAuthenticatedResource = require(\"./makeHandleAuthenticatedResource\")(errorSenders);\n\n    return function restifyOAuth2Setup(server, options) {\n        if (typeof options.hooks !== \"object\" || options.hooks === null) {\n            throw new Error(\"Must supply hooks.\");\n        }\n        requiredHooks.forEach(function (hookName) {\n            if (typeof options.hooks[hookName] !== \"function\") {\n                throw new Error(\"Must supply \" + hookName + \" hook.\");\n            }\n        });\n\n        if (typeof options.hooks.grantScopes !== \"function\") {\n            // By default, grant no scopes.\n            options.hooks.grantScopes = function (credentials, scopesRequested, req, cb) {\n                cb(null, []);\n            };\n        }\n\n        options = _.defaults(options, {\n            tokenEndpoint: \"/token\",\n            wwwAuthenticateRealm: \"Who goes there?\",\n            tokenExpirationTime: Infinity\n        });\n\n        // Allow `tokenExpirationTime: Infinity` (like above), but translate it into `undefined` so that\n        // `JSON.stringify` omits it entirely when we write out the response as\n        // `JSON.stringify({ expires_in: tokenExpirationTime, ... })`.\n        if (options.tokenExpirationTime === Infinity) {\n            options.tokenExpirationTime = undefined;\n        }\n\n        server.post(options.tokenEndpoint, function (req, res, next) {\n            grantToken(req, res, next, options);\n        });\n\n        server.use(function ccOAuth2Plugin(req, res, next) {\n            res.sendUnauthenticated = function (message) {\n                errorSenders.authenticationRequired(res, res.send.bind(res), options, message);\n            };\n\n            res.sendUnauthorized = function (message) {\n                errorSenders.insufficientAuthorization(res, res.send.bind(res), options, message);\n            };\n\n            if (req.method === \"POST\" && req.path() === options.tokenEndpoint) {\n                // This is handled by the route installed above, so do nothing.\n                next();\n            } else if (req.authorization.scheme) {\n                handleAuthenticatedResource(req, res, next, options);\n            } else {\n                // Otherwise Restify will set it by default, which gives false positives for application code.\n                req.username = null;\n                next();\n            }\n        });\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/cc/grantToken.js":"\"use strict\";\n\nvar validateGrantTokenRequest = require(\"../common/validateGrantTokenRequest\");\nvar finishGrantingToken = require(\"../common/finishGrantingToken\");\nvar makeOAuthError = require(\"../common/makeOAuthError\");\n\nmodule.exports = function grantToken(req, res, next, options) {\n    if (!validateGrantTokenRequest(\"client_credentials\", req, next)) {\n        return;\n    }\n\n    var clientId = req.authorization.basic.username;\n    var clientSecret = req.authorization.basic.password;\n    var credentials = { clientId: clientId, clientSecret: clientSecret };\n\n    options.hooks.grantClientToken(credentials, req, function (error, token) {\n        if (error) {\n            return next(error);\n        }\n\n        if (!token) {\n            res.header(\"WWW-Authenticate\", \"Basic realm=\\\"Client ID and secret did not authenticate.\\\"\");\n            return next(makeOAuthError(\"Unauthorized\", \"invalid_client\", \"Client ID and secret did not authenticate.\"));\n        }\n\n        var allCredentials = { clientId: clientId, clientSecret: clientSecret, token: token };\n        finishGrantingToken(allCredentials, token, options, req, res, next);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/common/validateGrantTokenRequest.js":"\"use strict\";\n\nvar _ = require(\"underscore\");\nvar makeOAuthError = require(\"./makeOAuthError\");\n\nmodule.exports = function validateGrantTokenRequest(grantType, req, next) {\n    function sendBadRequestError(type, description) {\n        next(makeOAuthError(\"BadRequest\", type, description));\n    }\n\n\n    if (!req.body || typeof req.body !== \"object\") {\n        sendBadRequestError(\"invalid_request\", \"Must supply a body.\");\n        return false;\n    }\n\n    if (!_.has(req.body, \"grant_type\")) {\n        sendBadRequestError(\"invalid_request\", \"Must specify grant_type field.\");\n        return false;\n    }\n\n    if (req.body.grant_type !== grantType) {\n        sendBadRequestError(\"unsupported_grant_type\", \"Only grant_type=\" + grantType + \" is supported.\");\n        return false;\n    }\n\n    if (!req.authorization || !req.authorization.basic) {\n        sendBadRequestError(\"invalid_request\", \"Must include a basic access authentication header.\");\n        return false;\n    }\n\n    if (_.has(req.body, \"scope\")) {\n        if (typeof req.body.scope !== \"string\") {\n            sendBadRequestError(\"invalid_request\", \"Must specify a space-delimited string for the scope field.\");\n            return false;\n        }\n    }\n\n    return true;\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/common/makeOAuthError.js":"\"use strict\";\n\nvar restify = require(\"restify\");\n\nmodule.exports = function makeOAuthError(errorClass, errorType, errorDescription) {\n    var body = { error: errorType, error_description: errorDescription };\n    return new restify[errorClass + \"Error\"]({ message: errorDescription, body: body });\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/common/finishGrantingToken.js":"\"use strict\";\n\nvar _ = require(\"underscore\");\nvar makeOAuthError = require(\"./makeOAuthError\");\n\nmodule.exports = function finishGrantingToken(allCredentials, token, options, req, res, next) {\n    var shouldIncludeScopeInResponse = false;\n    var scopesRequested = [];\n    if (_.has(req.body, \"scope\")) {\n        if (typeof req.body.scope !== \"string\") {\n            var message = \"The scope value must be a space-delimited string, if present.\";\n            return next(makeOAuthError(\"BadRequest\", \"invalid_scope\", message));\n        }\n        shouldIncludeScopeInResponse = true;\n        scopesRequested = req.body.scope.split(\" \");\n    }\n\n    options.hooks.grantScopes(allCredentials, scopesRequested, req, function (error, scopesGranted) {\n        if (error) {\n            return next(error);\n        }\n\n        if (!scopesGranted) {\n            var message = \"The requested scopes are invalid, unknown, or exceed the set of scopes appropriate for \" +\n                          \"these credentials.\";\n            return next(makeOAuthError(\"BadRequest\", \"invalid_scope\", message));\n        }\n\n        if (scopesGranted === true) {\n            scopesGranted = scopesRequested;\n        }\n\n        var responseBody = {\n            access_token: token,\n            token_type: \"Bearer\",\n            expires_in: options.tokenExpirationTime\n        };\n        if (shouldIncludeScopeInResponse) {\n            responseBody.scope = scopesGranted.join(\" \");\n        }\n\n        res.send(responseBody);\n        next();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/common/makeErrorSenders.js":"\"use strict\";\n\nvar restify = require(\"restify\");\n\nvar statusCodesToErrorCodes = {\n    400: \"invalid_request\",\n    401: \"invalid_token\"\n};\n\nmodule.exports = function makeErrorSenders(grantTypes) {\n    function setLinkHeader(res, options) {\n        res.header(\"Link\",\n            \"<\" + options.tokenEndpoint + \">; rel=\\\"oauth2-token\\\"; \" +\n            \"grant-types=\\\"\" + grantTypes + \"\\\"; token-types=\\\"bearer\\\"\");\n    }\n\n    function setWwwAuthenticateHeader(res, options, error) {\n        res.header(\"WWW-Authenticate\",\n            \"Bearer realm=\\\"\" + options.wwwAuthenticateRealm + \"\\\", \" +\n            \"error=\\\"\" + statusCodesToErrorCodes[error.statusCode] + \"\\\", \" +\n            \"error_description=\\\"\" + error.message + \"\\\"\");\n    }\n\n    function setWwwAuthenticateHeaderWithoutErrorInfo(res, options) {\n        // See http://tools.ietf.org/html/rfc6750#section-3.1: \"If the request lacks any authentication information\n        // (e.g., the client was unaware that authentication is necessary or attempted using an unsupported\n        // authentication method), the resource server SHOULD NOT include an error code or other error information.\"\n        res.header(\"WWW-Authenticate\", \"Bearer realm=\\\"\" + options.wwwAuthenticateRealm + \"\\\"\");\n    }\n\n    function sendWithHeaders(res, next, options, error) {\n        if (error.statusCode in statusCodesToErrorCodes) {\n            setLinkHeader(res, options);\n            setWwwAuthenticateHeader(res, options, error);\n        }\n        next(error);\n    }\n\n    function sendAuthenticationRequired(res, next, options, error) {\n        setLinkHeader(res, options);\n        setWwwAuthenticateHeaderWithoutErrorInfo(res, options);\n        next(error);\n    }\n\n    function sendInsufficientAuthorization(res, next, options, error) {\n        setLinkHeader(res, options);\n        next(error);\n    }\n\n    return {\n        sendWithHeaders: sendWithHeaders,\n\n        tokenRequired: function (res, next, options, message) {\n            if (message === undefined) {\n                message = \"Bearer token required. Follow the oauth2-token link to get one!\";\n            }\n\n            sendWithHeaders(res, next, options, new restify.BadRequestError(message));\n        },\n\n        authenticationRequired: function (res, next, options, message) {\n            if (message === undefined) {\n                message = \"Authentication via bearer token required. Follow the oauth2-token link to get one!\";\n            }\n\n            sendAuthenticationRequired(res, next, options, new restify.UnauthorizedError(message));\n        },\n\n        insufficientAuthorization: function (res, next, options, message) {\n            if (message === undefined) {\n                message = \"Insufficient authorization. Follow the oauth2-token link to get a token with more \" +\n                          \"authorization!\";\n            }\n\n            sendInsufficientAuthorization(res, next, options, new restify.ForbiddenError(message));\n        },\n\n        tokenInvalid: function (res, next, options, message) {\n            if (message === undefined) {\n                message = \"Bearer token invalid. Follow the oauth2-token link to get a valid one!\";\n            }\n\n            sendWithHeaders(res, next, options, new restify.UnauthorizedError(message));\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/common/makeHandleAuthenticatedResource.js":"\"use strict\";\n\nfunction hasBearerToken(req) {\n    return req.authorization && req.authorization.scheme === \"Bearer\" && req.authorization.credentials.length > 0;\n}\n\nfunction getBearerToken(req) {\n    return hasBearerToken(req) ? req.authorization.credentials : null;\n}\n\nmodule.exports = function makeHandleAuthenticatedResource(errorSenders) {\n    return function handleAuthenticatedResource(req, res, next, options) {\n        var token = getBearerToken(req);\n        if (!token) {\n            return errorSenders.tokenRequired(res, next, options);\n        }\n\n        req.pause();\n        options.hooks.authenticateToken(token, req, function (error, authenticated) {\n            req.resume();\n\n            if (error) {\n                return errorSenders.sendWithHeaders(res, next, options, error);\n            }\n\n            if (!authenticated) {\n                return errorSenders.tokenInvalid(res, next, options);\n            }\n\n            next();\n        });\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/ropc/index.js":"\"use strict\";\n\nvar makeSetup = require(\"../common/makeSetup\");\nvar grantToken = require(\"./grantToken\");\n\nvar grantTypes = \"password\";\nvar requiredHooks = [\"validateClient\", \"grantUserToken\", \"authenticateToken\"];\n\nmodule.exports = makeSetup(grantTypes, requiredHooks, grantToken);\n","/home/travis/build/npmtest/node-npmtest-restify-oauth2/node_modules/restify-oauth2/lib/ropc/grantToken.js":"\"use strict\";\n\nvar validateGrantTokenRequest = require(\"../common/validateGrantTokenRequest\");\nvar finishGrantingToken = require(\"../common/finishGrantingToken\");\nvar makeOAuthError = require(\"../common/makeOAuthError\");\n\nmodule.exports = function grantToken(req, res, next, options) {\n    function sendUnauthorizedError(type, description) {\n        res.header(\"WWW-Authenticate\", \"Basic realm=\\\"\" + description + \"\\\"\");\n        next(makeOAuthError(\"Unauthorized\", type, description));\n    }\n\n\n    if (!validateGrantTokenRequest(\"password\", req, next)) {\n        return;\n    }\n\n    var username = req.body.username;\n    var password = req.body.password;\n\n    if (!username) {\n        return next(makeOAuthError(\"BadRequest\", \"invalid_request\", \"Must specify username field.\"));\n    }\n\n    if (!password) {\n        return next(makeOAuthError(\"BadRequest\", \"invalid_request\", \"Must specify password field.\"));\n    }\n\n    var clientId = req.authorization.basic.username;\n    var clientSecret = req.authorization.basic.password;\n    var clientCredentials = { clientId: clientId, clientSecret: clientSecret };\n\n    options.hooks.validateClient(clientCredentials, req, function (error, result) {\n        if (error) {\n            return next(error);\n        }\n\n        if (!result) {\n            return sendUnauthorizedError(\"invalid_client\", \"Client ID and secret did not validate.\");\n        }\n\n        var allCredentials = { clientId: clientId, clientSecret: clientSecret, username: username, password: password };\n        options.hooks.grantUserToken(allCredentials, req, function (error, token) {\n            if (error) {\n                return next(error);\n            }\n\n            if (!token) {\n                return sendUnauthorizedError(\"invalid_grant\", \"Username and password did not authenticate.\");\n            }\n\n            var allCredentials = {\n                clientId: clientId,\n                clientSecret: clientSecret,\n                username: username,\n                password: password,\n                token: token\n            };\n            finishGrantingToken(allCredentials, token, options, req, res, next);\n        });\n    });\n};\n"}